version: '3'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.3
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    deploy:
      resources:
        limits:
          memory: 1G

  broker:
    image: confluentinc/cp-kafka:7.3.3
    restart: always
    #depends_on:
    #  - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    volumes:
      - broker-data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181' 
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_LOG_RETENTION_HOURS: 0
      KAFKA_LOG_RETENTION_MINUTES: 10
      KAFKA_SASL_ENABLED_MECHANISMS: SCRAM-SHA-512
    deploy:
      resources:
        limits:
          memory: 2G
          
  kafka-init:
    image: bitnami/kafka:3.5
    command:
      - "/bin/bash"
      - "-c"
      - |
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server broker:29092 --create --if-not-exists --topic mqtt-sessions --config cleanup.policy=compact
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server broker:29092 --create --if-not-exists --topic mqtt-retained --config cleanup.policy=compact
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server broker:29092 --create --if-not-exists --topic mqtt-messages
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server broker:29092 --create --if-not-exists --topic mndwrk-zilla-request
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server broker:29092 --create --if-not-exists --topic mndwrk-zilla-response
    depends_on:
      - broker
    init: true

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.3
    restart: always
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    deploy:
      resources:
        limits:
          memory: 512MB

  # Based on https://github.com/confluentinc/demo-scene/blob/master/kafka-connect-zero-to-hero/docker-compose.yml
  # and https://github.com/confluentinc/demo-scene/blob/master/ksql-atm-fraud-detection/docker-compose.yml
  connect:
    image: confluentinc/cp-kafka-connect:7.3.3
    restart: always
    stop_grace_period: 1200s
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      KAFKA_HEAP_OPTS: "-XX:InitialRAMPercentage=50.0 -XX:MaxRAMPercentage=75.0"
      CONNECT_BOOTSTRAP_SERVERS: "broker:29092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_TOPIC_CREATION_ENABLE: "true"
      SR_REST_ADVERTISED_HOST_NAME: "schema-registry"
      SR_REST_PORT: 8081
      #  ---------------
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars
    volumes:
       - ./connect:/data/connect-jars
    deploy:
      resources:
        limits:
          memory: 3G

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.3.3
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
      - schema-registry
      - connect
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: broker:29092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_KSQL_CONNECT_URL: 'http://connect:8083'
    deploy:
      resources:
        limits:
          memory: 2G

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.3.3
    container_name: ksqldb-cli
    depends_on:
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  redpanda-console:
    image: docker.redpanda.com/vectorized/console:latest
    restart: always
    depends_on:
      - broker
      # - schema-registry
      # - connect
    ports:
      - "9000:8080"
    environment:
      SERVER_BASEPATH: /redpanda
      #METRICSNAMESPACE: redpanda-console
      KAFKA_BROKERS: ${KAFKA_BROKERS:-broker:29092}
      KAFKA_SCHEMAREGISTRY_ENABLED: "true"
      KAFKA_SCHEMAREGISTRY_URLS: "http://schema-registry:8081"
      CONNECT_ENABLED: "true"
      CONNECT_CLUSTERS_NAME: connect-cluster
      CONNECT_CLUSTERS_URL: "http://connect:8083"
    deploy:
      resources:
        limits:
          memory: 1G

  zilla:
     image: ghcr.io/aklivity/zilla:latest
     container_name: zilla
     command:  ["start", "-v", "-e"]
     restart: always
     depends_on:
       - broker
       - schema-registry 
     ports:
       - "8080:8080"
       - "61616:61616"
       - "7114:7114"
       - "7190:7190"
     environment:
       KAFKA_BOOTSTRAP_SERVER: "broker:29092"
       SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
       ZILLA_INCUBATOR_ENABLED: true
       KAFKA_HOST: "broker"
       KAFKA_PORT: "29092"
       API_URL: "http://localhost:8080"
     volumes:
       - ./zilla.yml:/etc/zilla/zilla.yaml
     deploy:
      resources:
        limits:
          memory: 1G
  
  flink:
    image: flink:latest
    ports:
      - "8078:8081"
    command: jobmanager
    volumes:
      - ./flink/config.yaml:/config.yaml
    deploy:
      resources:
        limits:
          memory: 1G
  
  mongo:
    image: mongo
    container_name: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    deploy:
      resources:
        limits:
          memory: 1G

  #postgresql:
  #  image: postgres:14
  #  hostname: postgresql
  #  volumes:
  #    - pg_data:/var/lib/postgresql/data
  #  environment:
  #    POSTGRES_DB: "conduktor-console"
  #    POSTGRES_USER: "conduktor"
  #    POSTGRES_PASSWORD: "some_password"
  #    POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"

  #conduktor-console:
  #  image: conduktor/conduktor-console:1.23.0
  #  depends_on:
  #    - broker
  #  ports:
  #    - "9001:8080"
  #  volumes:
  #    - conduktor_data:/var/conduktor
  #  environment:
  #    CDK_DATABASE_URL: "postgresql://conduktor:some_password@postgresql:5432/conduktor-console"
  #    CDK_CLUSTERS_0_ID: "default"
  #    CDK_CLUSTERS_0_NAME: "My Local Kafka Cluster"
  #    CDK_CLUSTERS_0_COLOR: "#0013E7"
  #    CDK_CLUSTERS_0_BOOTSTRAPSERVERS: "PLAINTEXT://broker:29092"
  #    CDK_CLUSTERS_0_SCHEMAREGISTRY_URL: "http://schema-registry:8081"
  #    CDK_CLUSTERS_0_KAFKACONNECTS_0_URL: "http://connect:8083"
  #    CDK_CLUSTERS_0_KAFKACONNECTS_0_NAME: "full stack kafka connect"
  #    CDK_CLUSTERS_0_KSQLDB_0_URL: "http://ksqldb-server:8088"

volumes:
  zookeeper-data:
  zookeeper-log:
  broker-data:
  connect-data:
  mongodb-data:
  pg_data:
  conduktor_data:


networks:
  default:
    name: mndwrk-network