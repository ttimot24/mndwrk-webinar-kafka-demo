name: zilla-mndwrk

telemetry:
  metrics:
    - http.request.size
    - http.response.size
    - stream.opens.sent
    - stream.closes.sent
    
  exporters:
    stdout_logs_exporter:
      type: stdout
    prometheus_metric_exporter:
      type: prometheus
      options:
        endpoints:
          - scheme: http
            path: /metrics
            port: 7190

catalogs:
  schema-registry:
    type: karapace
    options: 
      url: ${{env.SCHEMA_REGISTRY_URL}} 
      context: default

bindings:
  mndwrk_tcp_server:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port: 
        - 8080
        - 61616
    routes:
      - when:
          - port: 8080
        exit: mndwrk_http_server
      - when:
          - port: 61616
        exit: mndwrk_mqtt_server
    telemetry:
      metrics:
        - http.*
        - stream.*
  
  mndwrk_http_server:
    type: http
    kind: server
    routes:
      - when:
          - headers:
              :scheme: http
              :authority: localhost:8080
        exit: mndwrk_sensor_service
    telemetry:
      metrics:
        - http.*

  mndwrk_sensor_service:
    type: http-kafka
    kind: proxy
    telemetry:
      metrics:
        - http.*
    routes:
      - when:
          - method: POST
            path: /api/v1/sensor-data
        exit: mndwrk_kafka_cache_client
        with:
          capability: produce
          topic: mndwrk-zilla-request
          key: ${idempotencyKey}
          reply-to: mndwrk-zilla-response
      - when:
          - method: GET
            path: /api/v1/sensor-data
        exit: mndwrk_kafka_cache_client
        with:
          capability: fetch
          topic: mndwrk-zilla-response
          merge:
            content-type: application/json
      - when:
          - method: GET
            path: /api/v1/sensor-data/{id}
        exit: mndwrk_kafka_cache_client
        with:
          capability: fetch
          topic: mndwrk-zilla-response
          filters:
            - key: ${params.id}
          merge:
            content-type: application/json


  mndwrk_mqtt_server:
    type: mqtt
    kind: server
    telemetry:
      metrics:
        - stream.*
    exit: mndwrk_mqtt_kafka_mapping

  # MQTT messages to Kafka topics
  mndwrk_mqtt_kafka_mapping:
    type: mqtt-kafka
    kind: proxy
    options:
      topics:
        sessions: mqtt-sessions
        messages: mqtt-messages
        retained: mqtt-retained
      clients:
        - /api/v1/sensor-data/{identity}
    routes:
      - when:
          - publish:
              - topic: /api/v1/sensor-data/+
        exit: mndwrk_kafka_cache_client
        with:
            messages: mndwrk-zilla-request
      - when:
          - subscribe:
              - topic: /api/v1/sensor-data/+
        exit: mndwrk_kafka_cache_client
        with:
          messages: mndwrk-zilla-response
    exit: mndwrk_kafka_cache_client
    telemetry:
      metrics:
        - stream.*

  mndwrk_kafka_cache_client:
    type: kafka
    kind: cache_client
    options:
      topics:
        - name: mndwrk-zilla-request
          value:
            model: avro
            view: json
            catalog:
              schema-registry:
                - strategy: topic
                  version: latest
        - name: mndwrk-zilla-response
          value:
            model: avro
            view: json
            catalog:
              schema-registry:
                - strategy: topic
                  version: latest
    exit: mndwrk_kafka_cache_server
  mndwrk_kafka_cache_server:
    type: kafka
    kind: cache_server
    telemetry:
      metrics:
        - http.*
        - stream.*
    options:
      bootstrap:
        - mqtt-sessions
        - mqtt-messages
        - mqtt-retained
        - mndwrk-zilla-response
      topics:
        - name: mndwrk-zilla-request
          value:
            model: avro
            view: json
            catalog:
              schema-registry:
                - strategy: topic
                  version: latest
        - name: mndwrk-zilla-response
          value:
            model: avro
            view: json
            catalog:
              schema-registry:
                - strategy: topic
                  version: latest
    exit: mndwrk_kafka_client
  mndwrk_kafka_client:
    type: kafka
    kind: client
    telemetry:
      metrics:
        - http.*
        - stream.*
    options:
      servers:
        - ${{env.KAFKA_BOOTSTRAP_SERVER}}
    exit: mndwrk_kafka_tcp_client
  mndwrk_kafka_tcp_client:
    type: tcp
    kind: client
    telemetry:
      metrics:
        - http.*
        - stream.*
    routes:
      - when:
          - cidr: 0.0.0.0/0